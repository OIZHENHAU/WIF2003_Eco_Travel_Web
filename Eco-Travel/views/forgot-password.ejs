<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700;800&family=Source+Sans+Pro:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Source Sans Pro', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .forgot-password-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            width: 100%;
            max-width: 450px;
            backdrop-filter: blur(10px);
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            font-family: 'Playfair Display', serif;
            color: #333;
            font-size: 2.2rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            color: #666;
            font-size: 1rem;
            line-height: 1.5;
        }

        .form-step {
            display: none;
        }

        .form-step.active {
            display: block;
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .form-group {
            margin-bottom: 25px;
            position: relative;
        }

        .form-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #fff;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .form-input::placeholder {
            color: #999;
        }

        .form-button {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .form-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .form-button:active {
            transform: translateY(0);
        }

        .form-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
        }

        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .back-to-login {
            text-align: center;
            margin-top: 25px;
        }

        .back-to-login a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .back-to-login a:hover {
            color: #764ba2;
            text-decoration: underline;
        }

        .otp-inputs {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 25px;
        }

        .otp-input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 1.2rem;
            font-weight: 600;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .otp-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .resend-otp {
            text-align: center;
            margin-top: 15px;
        }

        .resend-link {
            color: #667eea;
            cursor: pointer;
            text-decoration: underline;
            font-size: 0.9rem;
        }

        .resend-link:hover {
            color: #764ba2;
        }

        .resend-link.disabled {
            color: #999;
            cursor: not-allowed;
            text-decoration: none;
        }

        @media (max-width: 480px) {
            .forgot-password-container {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .otp-inputs {
                gap: 8px;
            }
            
            .otp-input {
                width: 45px;
                height: 45px;
            }
        }
    </style>
</head>
<body>
    <div class="forgot-password-container">
        <div class="header">
            <h1>Forgot Password?</h1>
            <p>Don't worry! Enter your email and we'll send you an OTP to reset your password.</p>
        </div>

        <div id="messageContainer"></div>

        <!-- Step 1: Email Input -->
        <div class="form-step active" id="emailStep">
            <form id="emailForm">
                <div class="form-group">
                    <input type="email" id="email" class="form-input" placeholder="Enter your email address" required>
                </div>
                <button type="submit" class="form-button" id="sendOtpBtn">
                    <span class="loading-spinner" id="emailSpinner"></span>
                    Send OTP
                </button>
            </form>
        </div>

        <!-- Step 2: OTP Verification and Password Reset -->
        <div class="form-step" id="otpStep">
            <form id="otpForm">
                <div class="form-group">
                    <label style="display: block; margin-bottom: 10px; color: #333; font-weight: 500;">Enter OTP sent to your email:</label>
                    <div class="otp-inputs">
                        <input type="text" class="otp-input" maxlength="1" data-index="0">
                        <input type="text" class="otp-input" maxlength="1" data-index="1">
                        <input type="text" class="otp-input" maxlength="1" data-index="2">
                        <input type="text" class="otp-input" maxlength="1" data-index="3">
                        <input type="text" class="otp-input" maxlength="1" data-index="4">
                        <input type="text" class="otp-input" maxlength="1" data-index="5">
                    </div>
                    <div class="resend-otp">
                        <span class="resend-link" id="resendOtp">Resend OTP</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <input type="password" id="newPassword" class="form-input" placeholder="Enter new password" required minlength="6">
                </div>
                
                <div class="form-group">
                    <input type="password" id="confirmPassword" class="form-input" placeholder="Confirm new password" required minlength="6">
                </div>
                
                <button type="submit" class="form-button" id="resetPasswordBtn">
                    <span class="loading-spinner" id="otpSpinner"></span>
                    Reset Password
                </button>
            </form>
        </div>

        <div class="back-to-login">
            <a href="/">‚Üê Back to Login</a>
        </div>
    </div>

    <script>
        // Form elements
        const emailForm = document.getElementById('emailForm');
        const otpForm = document.getElementById('otpForm');
        const emailStep = document.getElementById('emailStep');
        const otpStep = document.getElementById('otpStep');
        const messageContainer = document.getElementById('messageContainer');
        
        // Input elements
        const emailInput = document.getElementById('email');
        const otpInputs = document.querySelectorAll('.otp-input');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        
        // Button elements
        const sendOtpBtn = document.getElementById('sendOtpBtn');
        const resetPasswordBtn = document.getElementById('resetPasswordBtn');
        const resendOtpLink = document.getElementById('resendOtp');
        
        // Spinner elements
        const emailSpinner = document.getElementById('emailSpinner');
        const otpSpinner = document.getElementById('otpSpinner');

        // OTP input handling
        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                if (e.target.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });
            
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });

        // Show message function
        function showMessage(message, type) {
            messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`;
            setTimeout(() => {
                messageContainer.innerHTML = '';
            }, 5000);
        }

        // Send OTP
        emailForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = emailInput.value.trim();
            if (!email) {
                showMessage('Please enter your email address', 'error');
                return;
            }

            sendOtpBtn.disabled = true;
            emailSpinner.style.display = 'inline-block';

            try {
                const response = await fetch('/send-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage(data.message, 'success');
                    emailStep.classList.remove('active');
                    otpStep.classList.add('active');
                    otpInputs[0].focus();
                } else {
                    showMessage(data.message, 'error');
                }
            } catch (error) {
                showMessage('Network error. Please try again.', 'error');
            } finally {
                sendOtpBtn.disabled = false;
                emailSpinner.style.display = 'none';
            }
        });

        // Verify OTP and reset password
        otpForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Get OTP
            const otp = Array.from(otpInputs).map(input => input.value).join('');
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            // Validation
            if (otp.length !== 6) {
                showMessage('Please enter the complete 6-digit OTP', 'error');
                return;
            }

            if (newPassword.length < 6) {
                showMessage('Password must be at least 6 characters long', 'error');
                return;
            }

            if (newPassword !== confirmPassword) {
                showMessage('Passwords do not match', 'error');
                return;
            }

            resetPasswordBtn.disabled = true;
            otpSpinner.style.display = 'inline-block';

            try {
                const response = await fetch('/verify-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ otp, newPassword })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage(data.message + ' Redirecting to login...', 'success');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    showMessage(data.message, 'error');
                }
            } catch (error) {
                showMessage('Network error. Please try again.', 'error');
            } finally {
                resetPasswordBtn.disabled = false;
                otpSpinner.style.display = 'none';
            }
        });

        // Resend OTP
        resendOtpLink.addEventListener('click', async () => {
            if (resendOtpLink.classList.contains('disabled')) return;

            const email = emailInput.value.trim();
            
            resendOtpLink.classList.add('disabled');
            resendOtpLink.textContent = 'Sending...';

            try {
                const response = await fetch('/send-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage('OTP sent again to your email', 'success');
                    // Clear OTP inputs
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus();
                } else {
                    showMessage(data.message, 'error');
                }
            } catch (error) {
                showMessage('Failed to resend OTP. Please try again.', 'error');
            } finally {
                resendOtpLink.textContent = 'Resend OTP';
                setTimeout(() => {
                    resendOtpLink.classList.remove('disabled');
                }, 30000); // 30 second cooldown
            }
        });
    </script>
</body>
</html>